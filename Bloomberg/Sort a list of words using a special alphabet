Given a special alphabet (alien dictionary?) sort a list of words in ascedning order alphabetically:

alphabet: "a", "b", "c", "ch", "d", "dd", "e", "f", "ff", "g", "ng", "h", "i", "l", "ll", "m", "n", "o", "p", "ph", "r", "rh", "s", "t", "th", "u", "w", "y"

Input: "dd r",  "n a h", "d e a", "dd", "ng a h"

Output: "dea", "dd", "ddr", "ngah", "nah"

Solution:

/*
 * SortAccAlientDictionary_main.cpp
 *
 *  Created on: 26-Jul-2020
 *      Author: aditi
 */
#include<vector>
#include<string>
#include<iostream>
#include<unordered_map>
#include<algorithm>
#include<sstream>
using namespace std ;

/*
 * ---------------
 * | word | index|
 * ---------------
 */
unordered_map<string,int> lookup ;

bool mySortFunc(string a , string b){

	//splitting the string by spaces
	stringstream ssa(a) ;
	stringstream ssb(b) ;

	string aletter = "";
	string bletter = "";
	while(ssa >> aletter && ssb >> bletter){

		auto ita = lookup.find(aletter) ;
		auto itb = lookup.find(bletter) ;

		if(ita->second < itb->second){
			return true ;
		}
		else if(ita->second > itb->second)
		{
			return false ;
		}
	}

	//till now all the letter are sam e till the length of the smaller string
	if(ssb >> bletter){
		//there is still letter exists in b
		return true ;
	}

	if(ssa >> aletter){
		return false ;
	}

	return true ;
}

int main(){

	vector<string> dictionary= { "a", "b", "c", "ch", "d", "dd", "e", "f", "ff", "g", "ng", "h", "i", "l", "ll", "m", "n", "o", "p", "ph", "r", "rh", "s", "t", "th", "u", "w", "y"} ;

	vector<string> input = {"dd r",  "n a h", "d e a", "dd", "ng a h"} ;

	//forming dictionary
	int index = 0 ;
	for(string word : dictionary){
		lookup.insert({word, index}) ;
		index++ ;
	}

	cout << "Input : " ;
	for(string word : input ){
		cout << word << ", " ;
	}
	cout << endl ;

	sort(input.begin() , input.end() , mySortFunc) ;

	cout << "Output : " ;
	for(string word : input ){
		cout << word << ", " ;
	}
	cout << endl ;

	return 0 ;
}

Time Complexity - O(words in dictionary) + O(nlogn)[sort]
Space Complexity - O(words in dictionary)
